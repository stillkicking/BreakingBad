{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab321
\pard\tx321\pardeftab321\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 Implementation focused on 'business' logic rather than UI.\cf4 \
\
\cf2 THEORETICAL NEXT STEPS\cf4 \
\cf2 ----------------------\cf4 \
\
\cf2 1. Add error handling (for API load errors, empty images, empty and illegal JSON responses, etc.)\cf4 \
\cf2 \
2. Add a busy indicator (spinner) for the api load\cf4 \
\cf2 \
3. Add snapshot testing to test view controllers' logic\cf4 \
\cf2 \
4. Add further unit test coverage to DetailsPresenter (specifically for testing the combination of search and season filters). DetailsPresenter probably requires no unit tests and could rely on the snapshot testing of its view controller.\cf4 \
\cf2 \
5. etc...\cf4 \
}